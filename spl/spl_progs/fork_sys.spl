[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=8;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]=SP;
alias userSP R9;
userSP=SP;

SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;

multipush(R1);
R1=1;
call MOD_1;
multipop(R1);
if(R0==-1) then
    [[PTBR+((userSP-1)/512)*2]*512+(userSP-1)%512]=-1;
    SP=userSP;
    [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
    ireturn;
else
    alias childpid R0;
    if([PTBR+2]==-1) then
        multipush(R0,R1,R2,R6);
        R1=1;
        call MOD_2;
        [PTBR+2]=R0;
        multipop(R0,R1,R2,R6);
        multipush(R0,R1,R2,R6);
        R1=1;
        call MOD_2;
        [PTBR+3]=R0;
        multipop(R0,R1,R2,R6);
    endif;
    alias  stack1 R11;
    alias  stack2 R12;
    alias  userarea R13;

    multipush(R0,R1,R2,R6);
    R1=1;
    call MOD_2;
    stack1=R0;
    multipop(R0,R1,R2,R6);

    multipush(R0,R1,R2,R6);
    R1=1;
    call MOD_2;
    stack2=R0;
    multipop(R0,R1,R2,R6);

    multipush(R0,R1,R2,R6);
    R1=1;
    call MOD_2;
    userarea=R0;
    multipop(R0,R1,R2,R6);
    [PROCESS_TABLE+childpid*16+11]=userarea;
    [PROCESS_TABLE+childpid*16+3]=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+3];
    [PROCESS_TABLE+childpid*16+6]=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+6];
    [PROCESS_TABLE+childpid*16+10]=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+10];
    [PROCESS_TABLE+childpid*16+7]=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+7];
    [PROCESS_TABLE+childpid*16+13]=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
    [PROCESS_TABLE+childpid*16]=0;
    [PROCESS_TABLE+childpid*16+12]=0;
    [PROCESS_TABLE+childpid*16+9]=0;
    [PROCESS_TABLE+childpid*16+4]=CREATED;
    [PROCESS_TABLE+childpid*16+2]=[SYSTEM_STATUS_TABLE+1];
    [PROCESS_TABLE+childpid*16+14]=[PAGE_TABLE_BASE+childpid*20];
    [PROCESS_TABLE+childpid*16+15]=PTLR;
    alias i R14;
    i=0;
    while(i<16) do
        [([PROCESS_TABLE+childpid*16+11]+1)*512-i]=[([PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]+1)*512-i];
        i=i+1;
    endwhile;
    i=0;
    while(i<10) do
        [DISK_MAP_TABLE+childpid*10+i]=[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+i];
        i=i+1;
    endwhile;
    [PAGE_TABLE_BASE+childpid*20]=[PTBR];
    [PAGE_TABLE_BASE+childpid*20+1]=[PTBR+1];
    [PAGE_TABLE_BASE+childpid*20+2]=[PTBR+2];
    [PAGE_TABLE_BASE+childpid*20+3]=[PTBR+3];
    [PAGE_TABLE_BASE+childpid*20+4]=[PTBR+4];
    [PAGE_TABLE_BASE+childpid*20+5]=[PTBR+5];
    [PAGE_TABLE_BASE+childpid*20+6]=[PTBR+6];
    [PAGE_TABLE_BASE+childpid*20+7]=[PTBR+7];
    [PAGE_TABLE_BASE+childpid*20+8]=[PTBR+8];
    [PAGE_TABLE_BASE+childpid*20+9]=[PTBR+9];
    [PAGE_TABLE_BASE+childpid*20+10]=[PTBR+10];
    [PAGE_TABLE_BASE+childpid*20+11]=[PTBR+11];
    [PAGE_TABLE_BASE+childpid*20+12]=[PTBR+12];
    [PAGE_TABLE_BASE+childpid*20+13]=[PTBR+13];
    [PAGE_TABLE_BASE+childpid*20+14]=[PTBR+14];
    [PAGE_TABLE_BASE+childpid*20+15]=[PTBR+15];


    

    [PAGE_TABLE_BASE+childpid*20+16]=stack1;
    [PAGE_TABLE_BASE+childpid*20+17]=[PTBR+17];
    [PAGE_TABLE_BASE+childpid*20+19]=[PTBR+19];

    
    [PAGE_TABLE_BASE+childpid*20+18]=stack2;
    i=4;
while (i < 16) do
    if ([PAGE_TABLE_BASE + childpid*20 + i] != -1) then
        [MEMORY_FREE_LIST + [PAGE_TABLE_BASE + childpid*20 + i]] = [MEMORY_FREE_LIST + [PAGE_TABLE_BASE + childpid*20 + i]] + 1;
    endif;
    i = i + 2;
endwhile;
    i=0;
    while(i<512) do
        [[PAGE_TABLE_BASE+childpid*20+16]*512+i]=[[PTBR+16]*512+i];
        i=i+1;
    endwhile;
    i=0;
    while(i<512) do
        [[PAGE_TABLE_BASE+childpid*20+18]*512+i]=[[PTBR+18]*512+i];
        i=i+1;
    endwhile;
    if([PROCESS_TABLE+childpid*16+11]!=-1) then
        [[PROCESS_TABLE+childpid*16+11]*512]=BP;
    endif;
    [[PTBR+ (userSP-1)/512*2]*512+(userSP-1)%512]=childpid;
    [[PAGE_TABLE_BASE+childpid*20 + (userSP-1)/512*2]*512+(userSP-1)%512]=childpid;


        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;
    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE  + 1]*16 +  13];

    ireturn;
endif;

    
















